{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticates a user and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information with JWT token in cookie",
                        "schema": {
                            "$ref": "#/definitions/utils.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creates a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created user information",
                        "schema": {
                            "$ref": "#/definitions/utils.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    }
                }
            }
        },
        "/user": {
            "put": {
                "description": "Updates a user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created user information",
                        "schema": {
                            "$ref": "#/definitions/utils.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    }
                }
            }
        },
        "/user/password": {
            "put": {
                "description": "Change a users password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change users password",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created user information",
                        "schema": {
                            "$ref": "#/definitions/utils.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieves the currently logged in user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authenticated user JWT token",
                        "name": "commz-token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logged in user",
                        "schema": {
                            "$ref": "#/definitions/utils.User"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    }
                }
            }
        },
        "/verify": {
            "post": {
                "description": "Validates a JWT token and returns the associated user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify JWT token",
                "parameters": [
                    {
                        "description": "Token verification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.VerifyTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/utils.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing token",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ServiceError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ChangePasswordRequest": {
            "description": "Registration request model",
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "description": "User's password\n@example secretpassword123",
                    "type": "string",
                    "minLength": 6,
                    "example": "secretpassword123"
                },
                "new_password": {
                    "description": "User's password\n@example secretpassword123",
                    "type": "string",
                    "minLength": 6,
                    "example": "secretpassword123"
                }
            }
        },
        "handlers.LoginUserRequest": {
            "description": "Login request model",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address\n@example john.doe@example.com",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "description": "User's password\n@example secretpassword123",
                    "type": "string",
                    "minLength": 6,
                    "example": "secretpassword123"
                }
            }
        },
        "handlers.RegisterUserRequest": {
            "description": "Registration request model",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address\n@example john.doe@example.com",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "User's first name\n@example John",
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "description": "User's last name\n@example Doe",
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "description": "User's password\n@example secretpassword123",
                    "type": "string",
                    "minLength": 6,
                    "example": "secretpassword123"
                }
            }
        },
        "handlers.UpdateUserRequest": {
            "description": "Update request model",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name"
            ],
            "properties": {
                "email": {
                    "description": "User's email address\n@example john.doe@example.com",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "@example John",
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "description": "User's last name\n@example Doe",
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "handlers.VerifyTokenRequest": {
            "description": "Token verification request model",
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "description": "JWT token to verify\n@example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "utils.ServiceError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "utils.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        }
    }
}